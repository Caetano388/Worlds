using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

/// <summary>
/// Object that generates events of a certain type during the simulation run
/// </summary>
public class EventGenerator
{
    public const string FactionTargetType = "faction";
    public const string GroupTargetType = "group";

    /// <summary>
    /// Global UId counter
    /// </summary>
    public static long CurrentUId = StartUId;

    /// <summary>
    /// The context to use for generated events
    /// </summary>
    public EventContext Context;

    /// <summary>
    /// The UId to use for events generated by this generator
    /// </summary>
    public long UId;

    /// <summary>
    /// String Id for the events
    /// </summary>
    public string Id;
    /// <summary>
    /// Name to use in the UI for the events
    /// </summary>
    public string Name;

    /// <summary>
    /// Hash to use for RNGs that use events of this type
    /// </summary>
    public int IdHash;

    /// <summary>
    /// Conditions that decide if an event should be assigned to a target
    /// </summary>
    public IBooleanExpression[] AssignmentConditions;
    /// <summary>
    /// Conditions that decide if an event should trigger
    /// </summary>
    public IBooleanExpression[] TriggerConditions;

    /// <summary>
    /// Maximum time to pass before event triggers (since assignment date)
    /// </summary>
    public INumericExpression TimeToTrigger;

    /// <summary>
    /// Effects to occur after an event triggers
    /// </summary>
    public IEffectExpression[] Effects;

    /// <summary>
    /// First UId to use for events loaded from mods
    /// </summary>
    private const long StartUId = WorldEvent.PlantCultivationDiscoveryEventId + 1;

    /// <summary>
    /// Generates a new event using this generator and its context
    /// </summary>
    /// <returns></returns>
    public SimulationEvent GenerateEvent()
    {
        SimulationEvent simEvent = new SimulationEvent()
        {
            Context = Context,
            Generator = this
        };

        return simEvent;
    }
}
